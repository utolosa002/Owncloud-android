// Gradle build file
//
// This project was started in Eclipse and later moved to Android Studio. In the transition, both IDEs were supported.
// Due to this, the files layout is not the usual in new projects created with Android Studio / gradle. This file
// merges declarations usually split in two separates build.gradle file, one for global settings of the project in
// its root folder, another one for the app module in subfolder of root.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
    }
}

apply plugin: 'com.android.application'

ext {
    supportLibraryVersion = '27.1.1'
}

repositories {
    jcenter()
    google()

    maven {
        url "https://jitpack.io"
    }

    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:${supportLibraryVersion}"
    }
}

dependencies {
    /// dependencies for app building
    implementation project(':owncloud-android-library')
    implementation "com.android.support:support-v4:${supportLibraryVersion}"
    implementation "com.android.support:design:${supportLibraryVersion}"
    implementation 'com.jakewharton:disklrucache:2.0.2'
    implementation 'com.google.android.exoplayer:exoplayer:r2.2.0'
    implementation 'com.andrognito.patternlockview:patternlockview:1.0.0'
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:customtabs:${supportLibraryVersion}"
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'

    /// dependencies for local unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'

    /// dependencies for instrumented tests
    // JUnit4 Rules
    androidTestImplementation 'com.android.support.test:rules:0.5'

    // Android JUnit Runner
    androidTestImplementation 'com.android.support.test:runner:0.5'

    // Espresso core
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'

    // Espresso web
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:2.2.2'

    // UIAutomator - for cross-app UI tests, and to grant screen is turned on in Espresso tests
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    // fix conflict in dependencies; see http://g.co/androidstudio/app-test-app-conflict for details
    androidTestImplementation "com.android.support:support-annotations:${supportLibraryVersion}"

    // Image loading
    implementation ("com.github.bumptech.glide:glide:4.6.1") {
        exclude group: "com.android.support"
    }

    //Zooming Android ImageView.
    implementation "com.github.chrisbanes:PhotoView:2.0.0"
}

tasks.withType(Test) {
    /// increased logging for tests
    testLogging {
        events "passed", "skipped", "failed"
    }
}

android {
    compileSdkVersion 26

    defaultConfig {

        manifestPlaceholders.versionCode = "20800000"
        manifestPlaceholders.versionName = "2.8.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // arguments to be passed to functional tests
        testInstrumentationRunnerArgument "TEST_USER", "\"$System.env.OCTEST_APP_USERNAME\""
        testInstrumentationRunnerArgument "TEST_PASSWORD", "\"$System.env.OCTEST_APP_PASSWORD\""
        testInstrumentationRunnerArgument "TEST_USER2", "\"$System.env.OCTEST_APP_USERNAME2\""
        testInstrumentationRunnerArgument "TEST_PASSWORD2", "\"$System.env.OCTEST_APP_PASSWORD2\""
        testInstrumentationRunnerArgument "TEST_SERVER_URL", "\"$System.env.OCTEST_SERVER_BASE_URL\""
        testInstrumentationRunnerArgument "TRUSTED", "\"$System.env.OCTEST_SERVER_TRUSTED\""
        testInstrumentationRunnerArgument "TEST_USERNAME_ID", "\"$System.env.OCTEST_WEB_USERFIELD\""
        testInstrumentationRunnerArgument "TEST_PASSWORD_ID", "\"$System.env.OCTEST_WEB_PASSFIELD\""
        testInstrumentationRunnerArgument "TEST_SUBMIT_XPATH", "\"$System.env.OCTEST_WEB_SUBMITXPATH\""
        testInstrumentationRunnerArgument "TEST_LOOKUP", "\"$System.env.OCTEST_SERVER_LOOKUP\""
    }

    // adapt structure from Eclipse to Gradle/Android Studio expectations;
    // see http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Configuring-the-Structure
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // move whole local unit tests structure as a whole from src/test/* to test/*
        test.setRoot('test')

        // move whole instrumented tests structure as a whole from src/androidTest/* to androidTest/*
        androidTest.setRoot('androidTest')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    adbOptions {
        timeOutInMs(20 * 60 * 1000)
    }

    signingConfigs {
        release {
            if (System.env.OC_RELEASE_KEYSTORE) {
                storeFile file(System.env.OC_RELEASE_KEYSTORE)  // use an absolute path
                storePassword System.env.OC_RELEASE_KEYSTORE_PASSWORD
                keyAlias System.env.OC_RELEASE_KEY_ALIAS
                keyPassword System.env.OC_RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {

        release {
            if (System.env.OC_RELEASE_KEYSTORE) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    applicationVariants.all { variant ->
        def appName = System.env.OC_APP_NAME
        setOutputFileName(variant, appName, project)
    }
}

// Updates output file names of a given variant to format
// [appName].[variant.versionName].[OC_BUILD_NUMBER]-[variant.name].apk.
//
// OC_BUILD_NUMBER is an environment variable read directly in this method. If undefined, it's not added.
//
// @param variant           Build variant instance which output file name will be updated.
// @param appName           String to use as first part of the new file name. May be undefined, the original
//                          project.archivesBaseName property will be used instead.
// @param callerProject     Caller project.

def setOutputFileName(variant, appName, callerProject) {
    logger.info("Setting new name for output of variant $variant.name")

    def originalFile = variant.outputs[0].outputFile
    def originalName = originalFile.name
    logger.info("$variant.name: originalName is $originalName")

    def newName = ""

    if (appName) {
        newName += appName
    } else {
        newName += callerProject.archivesBaseName
    }

    def versionName = "$variant.mergedFlavor.versionName"
    if (variant.mergedFlavor.manifestPlaceholders.versionName != null) {
        versionName = "$variant.mergedFlavor.manifestPlaceholders.versionName"
    }
    if (variant.buildType.manifestPlaceholders.versionName != null) {
        versionName = "$variant.buildType.manifestPlaceholders.versionName"
    }
    newName += "_$versionName"

    def buildNumber = System.env.OC_BUILD_NUMBER
    if (buildNumber) {
        newName += ".$buildNumber"
    }

    newName += originalName.substring(callerProject.archivesBaseName.length())

    logger.info("$variant.name: newName is $newName")

    variant.outputs.all {
        outputFileName = new File(".", newName)
    }
}
